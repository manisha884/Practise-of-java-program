
         What is C++?

C++ is a cross-platform language that can be used to create high-performance applications.

C++ was developed by Bjarne Stroustrup, as an extension to the C language.

C++ gives programmers a high level of control over system resources and memory.

The language was updated 3 major times in 2011, 2014, and 2017 to C++11, C++14, and C++17.

     
         Why Use C++

C++ is one of the world's most popular programming languages.

C++ can be found in today's operating systems, Graphical User Interfaces, and embedded systems.

C++ is an object-oriented programming language which gives a clear structure to programs and allows code to be 
reused, lowering development costs.

C++ is portable and can be used to develop applications that can be adapted to multiple platforms.

C++ is fun and easy to learn!

As C++ is close to C# and Java, it makes it easy for programmers to switch to C++ or vice versa


09/06/2021

To start using C++, you need two things:

A text editor, like Notepad, to write C++ code
A compiler, like GCC, to translate the C++ code into a language that the computer will understand
There are many text editors and compilers 


example:

#include <iostream>
using namespace std;

int main() {
  cout << "Hello World!";
  return 0;
}

10/06/2021
Line 1: #include <iostream> is a header file library that lets us work with input and output objects, such as 
cout (used in line 5). Header files add functionality to C++ programs.

Line 2: using namespace std means that we can use names for objects and variables from the standard library.
Line 3: A blank line. C++ ignores white space.

Line 4: Another thing that always appear in a C++ program, is int main(). This is called a function. Any code 
inside its curly brackets {} will be executed.

Line 5: cout (pronounced "see-out") is an object used together with the insertion operator (<<) to output/print 
text. In our example it will output "Hello World".

Note: Every C++ statement ends with a semicolon ;.

Note: The body of int main() could also been written as:
int main () { cout << "Hello World! "; return 0; }

Remember: The compiler ignores white spaces. However, multiple lines makes the code more readable.

Line 6: return 0 ends the main function.

Line 7: Do not forget to add the closing curly bracket } to actually end the main function.

C++ Output (Print Text)
The cout object, together with the << operator, is used to output values/print text:

NEW LINE
To insert a new line, you can use the \n character:
Two \n characters after each other will create a blank line:
Another way to insert a new line, is with the endl manipulator:
Both \n and endl are used to break lines. However, \n is used more often and is the preferred way.

C++ Comments
Comments can be used to explain C++ code, and to make it more readable. It can also be used to prevent execution 
when testing alternative code. Comments can be singled-lined or multi-lined.

Single-line Comments

Single-line comments start with two forward slashes (//).

Any text between // and the end of the line is ignored by the compiler (will not be executed).

This example uses a single-line comment before a line of code:

C++ Multi-line Comments
Multi-line comments start with /* and ends with */.

Any text between /* and */ will be ignored by the compiler

Single or multi-line comments?
It is up to you which you want to use. Normally, we use // for short comments, and /* */ for longer


C++ Variables
Variables are containers for storing data values.

In C++, there are different types of variables (defined with different keywords), for example:

int - stores integers (whole numbers), without decimals, such as 123 or -123
double - stores floating point numbers, with decimals, such as 19.99 or -19.99
char - stores single characters, such as 'a' or 'B'. Char values are surrounded by single quotes
string - stores text, such as "Hello World". String values are surrounded by double quotes
bool - stores values with two states: true or false
Declaring (Creating) Variables
To create a variable, you must specify the type and assign it a value:

Syntax
type variable = value;
Where type is one of C++ types (such as int), and variable is the name of the variable (such as x
 or myName). The equal sign is used to assign values to the variable.

To create a variable that should store a number, look at the following example:

Example
Create a variable called myNum of type int and assign it the value 15:

int myNum = 15;
cout << myNum;
You can also declare a variable without assigning the value, and assign the value later:

Example
int myNum;
myNum = 15;
cout << myNum;
Note that if you assign a new value to an existing variable, it will overwrite the previous value


Example1:
#include <iostream>
#include <String>

using namespace std;

int main()
{
    //int having a return   int  --> integer  0-- infity //if no return
    std:: cout<< "Hello World TechRel\n";
    //employee details -> empid, empname, empSalary, empAddress, employerName, empgrade
    type variable_name = value;
   
 int empid = 1001;
    string empname = "Tom Jerry", empAddress = "flat 3 disney world, hollywood 2457",employerName = "Cartoon Network";
    double empSalary = 45609.30;
    char empgrade = 'D';
    string 

    cout<<"empid :" <<empid <<endl;
    cout<<"empname :" <<empname<<endl;
    cout<<"emSalary :" <<empSalary<<endl;
    cout<<"\nempgrade :" <<empgrade<<endl;
    cout<<"empAddress :" <<empAddress<<endl;
    cout<<"employerName :" <<employerName<<"\n";
    return 0;
}
           OUTPUT:
Hello World TechRel
empid :1001
empname :Tom Jerry
emSalary :45609.3

empgrade :D
empAddress :flat 3 disney world, hollywood 2457
employerName :Cartoon Network

C++
 is a programming language
 Easy to use
Process returned 0 (0x0)   execution time : 3.358 s
Press any key to continue.

C++ Identifiers
All C++ variables must be identified with unique names.

These unique names are called identifiers.

Identifiers can be short names (like x and y) or more descriptive names (age, sum, totalVolume).

Note: It is recommended to use descriptive names in order to create understandable and maintainable code

The general rules for constructing names for variables (unique identifiers) are:

Names can contain letters, digits and underscores
Names must begin with a letter or an underscore (_)
Names are case sensitive (myVar and myvar are different variables)
Names cannot contain whitespaces or special characters like !, #, %, etc.
Reserved words (like C++ keywords, such as int) cannot be used as names


Constants
When you do not want others (or yourself) to override existing variable values, use the const keyword (this will 
declare the variable as "constant", which means unchangeable and read-only):

Example
const int myNum = 15;  // myNum will always be 15
myNum = 10;  // error: assignment of read-only variable 'myNum'
You should always declare the variable as constant when you have values that are unlikely to change:

C++ User Input
You have already learned that cout is used to output (print) values. Now we will use cin to get user input.

cin is a predefined variable that reads data from the keyboard with the extraction operator (>>).

In the following example, the user can input a number, which is stored in the variable x. Then we print the value of x:

cout is pronounced "see-out". Used for output, and uses the insertion operator (<<)

cin is pronounced "see-in". Used for input, and uses the extraction operator (>>)

Basic Data Types
The data type specifies the size and type of information the variable will store:

Data Type	Size	Description
int	4 bytes	Stores whole numbers, without decimals
float	4 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 7 decimal digits
double	8 bytes	Stores fractional numbers, containing one or more decimals. Sufficient for storing 15 decimal digits
boolean	1 byte	Stores true or false values
char	1 byte	Stores a single character/letter/number, or ASCII values



Numeric Types
Use int when you need to store a whole number without decimals, like 35 or 1000, and float or double when you need a 
floating point number (with decimals), like 9.99 or 3.14515.

int
int myNum = 1000;
cout << myNum;
float
float myNum = 5.75;
cout << myNum;
double
double myNum = 19.99;
cout << myNum;

Boolean Types
A boolean data type is declared with the bool keyword and can only take the values true or false. 
When the value is returned, true = 1 and false = 0.
Character Types
The char data type is used to store a single character. The character must be surrounded by single quotes, like 'A' or 'c':
String Types
The string type is used to store a sequence of characters (text). This is not a built-in type, but it behaves like one 
in its most basic usage. 
String values must be surrounded by double quotes:

C++ Operators
Operators are used to perform operations on variables and values.

C++ divides the operators into the following groups:

Arithmetic operators
Assignment operators
Comparison operators
Logical operators
Bitwise operators
Arithmetic Operators

Arithmetic operators are used to perform common mathematical operations.

Operator	Name	Description	Example	Try it
+	Addition	Adds together two values	x + y	
-	Subtraction	Subtracts one value from another	x - y	
*	Multiplication	Multiplies two values	x * y	
/	Division	Divides one value by another	x / y	
%	Modulus	Returns the division remainder	x % y	
++	Increment	Increases the value of a variable by 1	++x	
--	Decrement	Decreases the value of a variable by 1	--x

Assignment Operators
Assignment operators are used to assign values to variables.
Operator	Example	Same As	
=	x = 5	x = 5	
+=	x += 3	x = x + 3	
-=	x -= 3	x = x - 3	
*=	x *= 3	x = x * 3	
/=	x /= 3	x = x / 3	
%=	x %= 3	x = x % 3	
&=	x &= 3	x = x & 3	
|=	x |= 3	x = x | 3	
^=	x ^= 3	x = x ^ 3	
>>=	x >>= 3	x = x >> 3	
<<=	x <<= 3	x = x << 3

Comparison Operators
Comparison operators are used to compare two values.

Note: The return value of a comparison is either true (1) or false (0).
int x = 5;
int y = 3;
cout << (x > y); // returns 1 (true) because 5 is greater than 3
A list of all comparison operators:

Operator	Name	Example	Try it
==	Equal to	x == y	
!=	Not equal	x != y	
>	Greater than	x > y	
<	Less than	x < y	
>=	Greater than or equal to	x >= y	
<=	Less than or equal to	x <= y

Logical Operators
Logical operators are used to determine the logic between variables or values:

Operator	Name	Description	                                  Example	
&& 	Logical and	Returns true if both statements are true	x < 5 &&  x < 10	
|| 	Logical or	Returns true if one of the statements is true	x < 5 || x < 4	
!	Logical not	Reverse the result, returns false if the result is true	!(x < 5 && x < 10)	

C++ Strings

Strings are used for storing text.

A string variable contains a collection of characters surrounded by double quotes:

Example
Create a variable of type string and assign it a value:

string greeting = "Hello";
To use strings, you must include an additional header file in the source code, the <string> library

String Concatenation
The + operator can be used between strings to add them together to make a new string. This is called concatenation:

Example
string firstName = "John ";
string lastName = "Doe";
string fullName = firstName + lastName;
cout << fullName;

String Length

To get the length of a string, use the length() function:
 You might see some C++ programs that use the size() function to get the length of a string. 
This is just an alias of length().
 It is completely up to you if you want to use length() or size()

Append
A string in C++ is actually an object, which contain functions that can perform certain operations on strings. 
For example, you can also concatenate strings with the append() function:

Access Strings
You can access the characters in a string by referring to its index number inside square brackets [].

User Input Strings
It is possible to use the extraction operator >> on cin to display a string entered by a user

However, cin considers a space (whitespace, tabs, etc) as a terminating character, which means 
that it can only display a single word (even if you type many words)

when working with strings, we often use the getline() function to read a line of text. 
It takes cin as the first parameter, and the string variable as second



String Length
To get the length of a string, use the length() function
Tip: You might see some C++ programs that use the size() function to get the length of a string. This is just an 
alias of length().
 It is completely up to you if you want to use length() or size():


Omitting Namespace
You might see some C++ programs that runs without the standard namespace library. The using namespace std line can be 
omitted and replaced with the std keyword, followed by the :: operator for string (and cout) objects:
 
C++ math
Max and min
The max(x,y) function can be used to find the highest value of x and y

And the min(x,y) function can be used to find the lowest value of x and y:

C++ <cmath> Header
Other functions, such as sqrt (square root), round (rounds a number) and log (natural logarithm), 
can be found in the <cmath> header file

Function	Description
abs(x)	Returns the absolute value of x
acos(x)	Returns the arccosine of x
asin(x)	Returns the arcsine of x
atan(x)	Returns the arctangent of x
cbrt(x)	Returns the cube root of x
ceil(x)	Returns the value of x rounded up to its nearest integer
cos(x)	Returns the cosine of x
cosh(x)	Returns the hyperbolic cosine of x
exp(x)	Returns the value of Ex
expm1(x)	Returns ex -1
fabs(x)	      Returns the absolute value of a floating x
fdim(x, y)	Returns the positive difference between x and y
floor(x)	Returns the value of x rounded down to its nearest integer
hypot(x, y)	Returns sqrt(x2 +y2) without intermediate overflow or underflow
fma(x, y, z)	Returns x*y+z without losing precision
fmax(x, y)	Returns the highest value of a floating x and y
fmin(x, y)	Returns the lowest value of a floating x and y
fmod(x, y)	Returns the floating point remainder of x/y
pow(x, y)	Returns the value of x to the power of y
sin(x)	Returns the sine of x (x is in radians)
sinh(x)	Returns the hyperbolic sine of a double value
tan(x)	Returns the tangent of an angle
tanh(x)	Returns the hyperbolic tangent of a double value

C++ Booleans
Very often, in programming, you will need a data type that can only have one of two values, like:

YES / NO
ON / OFF
TRUE / FALSE
For this, C++ has a bool data type, which can take the values true (1) or false (0).

Boolean Values
A boolean variable is declared with the bool keyword and can only take the values true or false
From the example above, you can read that a true value returns 1, and false returns 0.

Boolean Expression
A Boolean expression is a C++ expression that returns a boolean value: 1 (true) or 0 (false).

You can use a comparison operator, such as the greater than (>) operator to find out 
if an expression (or a variable) is true

C++ Conditions and If Statements
C++ supports the usual logical conditions from mathematics:

Less than: a < b
Less than or equal to: a <= b
Greater than: a > b
Greater than or equal to: a >= b
Equal to a == b
Not Equal to: a != b
You can use these conditions to perform different actions for different decisions.

C++ has the following conditional statements:

Use if to specify a block of code to be executed, if a specified condition is true
Use else to specify a block of code to be executed, if the same condition is false
Use else if to specify a new condition to test, if the first condition is false
Use switch to specify many alternative blocks of code to be executed
The if Statement
Use the if statement to specify a block of C++ code to be executed if a condition is true.

The else Statement
Use the else statement to specify a block of code to be executed if the condition is false.

Syntax
if (condition) {
  // block of code to be executed if the condition is true
} else {
  // block of code to be executed if the condition is false
}


The else if Statement
Use the else if statement to specify a new condition if the first condition is false.

Syntax
if (condition1) {
  // block of code to be executed if condition1 is true
} else if (condition2) {
  // block of code to be executed if the condition1 is false and condition2 is true
} else {
  // block of code to be executed if the condition1 is false and condition2 is false
}

Short Hand If...Else (Ternary Operator)
There is also a short-hand if else, which is known as the ternary operator because it consists of three operands. 
It can be used to replace multiple lines of code with a single line. It is often used to replace simple 
if else statements:

Syntax
variable = (condition) ? expressionTrue : expressionFalse;


C++ Switch Statements
Use the switch statement to select one of many code blocks to be executed
Syntax
switch(expression) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
This is how it works:

The switch expression is evaluated once
The value of the expression is compared with the values of each case
If there is a match, the associated block of code is executed
The break and default keywords are optional,

The break Keyword
When C++ reaches a break keyword, it breaks out of the switch block.

This will stop the execution of more code and case testing inside the block.

When a match is found, and the job is done, it's time for a break. There is no need for more testing.

A break can save a lot of execution time because it "ignores" the execution 
of all the rest of the code in the switch block.

C++ Loops
Loops can execute a block of code as long as a specified condition is reached.

Loops are handy because they save time, reduce errors, and they make code more readable.

C++ While Loop
The while loop loops through a block of code as long as a specified condition is true:

Syntax
while (condition) {
  // code block to be executed
}

The Do/While Loop
The do/while loop is a variant of the while loop. This loop will execute the code block once, before 
checking if the condition is true, 
then it will repeat the loop as long as the condition is true.

Syntax
do {
  // code block to be executed
}
while (condition);

 a do/while loop. The loop will always be executed at least once, even if the condition 
is false, because the code block is executed before the condition is tested:

C++ For Loop
When you know exactly how many times you want to loop through a block of code, use the for loop 
instead of a while loop:

Syntax
for (statement 1; statement 2; statement 3) {
  // code block to be executed
}
Statement 1 is executed (one time) before the execution of the code block.

Statement 2 defines the condition for executing the code block.

Statement 3 is executed (every time) after the code block has been executed

C++ Break
You have already seen the break statement used in an earlier chapter of this tutorial. 
It was used to "jump out" of a switch statement.

The break statement can also be used to jump out of a loop

C++ Continue
The continue statement breaks one iteration (in the loop), if a specified condition occurs,
 and continues with the next iteration in the loop.

C++ Arrays
Arrays are used to store multiple values in a single variable, instead of declaring separate variables for each value.

To declare an array, define the variable type, specify the name of the array followed by square brackets and specify 
the number of elements it should store:

string cars[4];
We have now declared a variable that holds an array of four strings. To insert values to it, we can use an array 
literal - place the values in a comma-separated list, inside curly braces:

string cars[4] = {"Volvo", "BMW", "Ford", "Mazda"};
To create an array of three integers, you could write:

int myNum[3] = {10, 20, 30};
Access the Elements of an Array
You access an array element by referring to the index number

Loop Through an Array
You can loop through the array elements with the for loop.

Omit Array Size
You don't have to specify the size of the array. But if you don't, it will only be as big as the 
elements that are inserted into it

Creating References
A reference variable is a "reference" to an existing variable, and it is created with the & operator:

string food = "Pizza";  // food variable
string &meal = food;    // reference to food
Now, we can use either the variable name food or the reference name meal to refer to the food variable:

Memory Address
In the example from the previous page, the & operator was used to create a reference variable. But it
 can also be used to get the memory address of a variable;
 which is the location of where the variable is stored on the computer.

When a variable is created in C++, a memory address is assigned to the variable. And when we assign a 
value to the variable, it is stored in this memory address.

To access it, use the & operator, and the result will represent where the variable is stored:

Creating Pointers
You learned from the previous chapter, that we can get the memory address of a variable by using the & operator:

Example
string food = "Pizza"; // A food variable of type string

cout << food;  // Outputs the value of food (Pizza)
cout << &food; // Outputs the memory address of food (0x6dfed4)
A pointer however, is a variable that stores the memory address as its value.

A pointer variable points to a data type (like int or string) of the same type, and is created with the * operator. 
The address of the variable you're working with is assigned to the pointer

C++ Dereference
Get Memory Address and Value
In the example from the previous page, we used the pointer variable to get the memory address of a variable
 (used together with the & reference operator). However, 
you can also use the pointer to get the value of the variable, by using the * operator (the dereference operator):

C++ Modify Pointers
Modify the Pointer Value
You can also change the pointer's value. But note that this will also change the value of the original variable:

C++ Functions
A function is a block of code which only runs when it is called.

You can pass data, known as parameters, into a function.

Functions are used to perform certain actions, and they are important for reusing code: Define the code once, 
and use it many times.

Create a Function
C++ provides some pre-defined functions, such as main(), which is used to execute code. But you can also 
create your own functions to perform certain actions.

To create (often referred to as declare) a function, specify the name of the function, followed by parentheses ():

Syntax
void myFunction() {
  // code to be executed
}

Call a Function
Declared functions are not executed immediately. They are "saved for later use", and will be executed later,
 when they are called.

To call a function, write the function's name followed by two parentheses () and a semicolon ;

In the following example, myFunction() is used to print a text (the action), when it is called:
A function can be called multiple times:

Function Declaration and Definition
A C++ function consist of two parts:

Declaration: the function's name, return type, and parameters (if any)
Definition: the body of the function (code to be executed)
void myFunction() { // declaration
  // the body of the function (definition)
}
Note: If a user-defined function, such as myFunction() is declared after the main() function, an error will occur:

You will often see C++ programs that have function declaration above main(), and function definition below main().
 This will make the code better organized and easier to read

Parameters and Arguments
Information can be passed to functions as a parameter. Parameters act as variables inside the function.

Parameters are specified after the function name, inside the parentheses. You can add as many parameters as 
you want, just separate them with a comma:

Syntax
void functionName(parameter1, parameter2, parameter3) {
  // code to be executed
}
The following example has a function that takes a string called fname as parameter. When the function is
 called, we pass along a first name,
 which is used inside the function to print the full name:

Default Parameter Value
You can also use a default parameter value, by using the equals sign (=).

If we call the function without an argument, it uses the default value

Multiple Parameters
Inside the function, you can add as many parameters as you want:

Return Values
The void keyword, used in the previous examples, indicates that the function should not return a value.
 If you want the function to return a value,you can use a data type (such as int, string, etc.)
 instead of void, and use the return keyword inside the function

Pass By Reference
In the examples from the previous page, we used normal variables when we passed parameters to a function. 
You can also pass a reference to the function. 
This can be useful when you need to change the value of the arguments:

Function Overloading
With function overloading, multiple functions can have the same name with different parameters:

Example
int myFunction(int x)
float myFunction(float x)
double myFunction(double x, double y)

Instead of defining two functions that should do the same thing, it is better to overload one.

In the example below, we overload the plusFunc function to work for both int and double

C++ Classes

C++ What is OOP?
OOP stands for Object-Oriented Programming.

Procedural programming is about writing procedures or functions that perform operations on the data,
 while object-oriented programming is about creating objects that contain both data and functions.

Object-oriented programming has several advantages over procedural programming:

OOP is faster and easier to execute
OOP provides a clear structure for the programs
OOP helps to keep the C++ code DRY "Don't Repeat Yourself", and makes the code easier to maintain, 
modify and debug
OOP makes it possible to create full reusable applications with less code and shorter development time
Tip: The "Don't Repeat Yourself" (DRY) principle is about reducing the repetition of code. You should 
extract out the codes that are common for the application, and place them at a single place and reuse 
them instead of repeating it.

C++ What are Classes and Objects?
Classes and objects are the two main aspects of object-oriented programming.

Look at the following illustration to see the difference between class and objects
So, a class is a template for objects, and an object is an instance of a class.

When the individual objects are created, they inherit all the variables and functions from the class.

C++ Classes/Objects
C++ is an object-oriented programming language.

Everything in C++ is associated with classes and objects, along with its attributes and methods. 
 example: in real life, a car is an object. The car has attributes, such as weight and color, and 
methods, such as drive and brake.

Attributes and methods are basically variables and functions that belongs to the class. These are often 
referred to as "class members".

A class is a user-defined data type that we can use in our program, and it works as an object constructor, 
or a "blueprint" for creating objects.

Create a Class
To create a class, use the class keyword:

Example
Create a class called "MyClass":

class MyClass {       // The class
  public:             // Access specifier
    int myNum;        // Attribute (int variable)
    string myString;  // Attribute (string variable)
};
Example explained
The class keyword is used to create a class called MyClass.
The public keyword is an access specifier, which specifies that members (attributes and methods) of 
the class are accessible from outside the class. You will learn more about access specifiers later.
Inside the class, there is an integer variable myNum and a string variable myString. 
When variables are declared within a class, they are called attributes.
At last, end the class definition with a semicolon ;.
Create an Object
In C++, an object is created from a class. We have already created the class named MyClass, so now
 we can use this to create objects.

To create an object of MyClass, specify the class name, followed by the object name.

To access the class attributes (myNum and myString), use the dot syntax (.) on the object:

Multiple Objects
You can create multiple objects of one class:

Class Methods
Methods are functions that belongs to the class.

There are two ways to define functions that belongs to a class:

Inside class definition
Outside class definition
In the following example, we define a function inside the class, and we name it "myMethod".

Note: You access methods just like you access attributes; by creating an object of the class
 and using the dot syntax (.):

Inside Example
class MyClass {        // The class
  public:              // Access specifier
    void myMethod() {  // Method/function defined inside the class
      cout << "Hello World!";
    }
};

int main() {
  MyClass myObj;     // Create an object of MyClass
  myObj.myMethod();  // Call the method
  return 0;
}
To define a function outside the class definition, you have to declare it inside the class and 
then define it outside of the class. This is done by specifiying the name of the class, 
followed the scope resolution :: operator, followed by the name of the function:

Outside Example
class MyClass {        // The class
  public:              // Access specifier
    void myMethod();   // Method/function declaration
};

// Method/function definition outside the class
void MyClass::myMethod() {
  cout << "Hello World!";
}

int main() {
  MyClass myObj;     // Create an object of MyClass
  myObj.myMethod();  // Call the method
  return 0;
}
Parameters
You can also add parameters:

Constructors
A constructor in C++ is a special method that is automatically called when an object of a class is created.

To create a constructor, use the same name as the class, followed by parentheses ():

Example
class MyClass {     // The class
  public:           // Access specifier
    MyClass() {     // Constructor
      cout << "Hello World!";
    }
};

int main() {
  MyClass myObj;    // Create an object of MyClass (this will call the constructor)
  return 0;
}
Note: The constructor has the same name as the class, it is always public, and it does not have 
any return value.

Constructor Parameters
Constructors can also take parameters (just like regular functions), which can be useful for setting 
initial values for attributes.

The following class have brand, model and year attributes, and a constructor with different parameters. 
Inside the constructor we set the attributes equal to the constructor parameters (brand=x, etc).
 When we call the constructor (by creating an object of the class),
 we pass parameters to the constructor, which will set the value of the corresponding attributes 
to the same:

Example
class Car {        // The class
  public:          // Access specifier
    string brand;  // Attribute
    string model;  // Attribute
    int year;      // Attribute
    Car(string x, string y, int z) { // Constructor with parameters
      brand = x;
      model = y;
      year = z;
    }
};

int main() {
  // Create Car objects and call the constructor with different values
  Car carObj1("BMW", "X5", 1999);
  Car carObj2("Ford", "Mustang", 1969);

  // Print values
  cout << carObj1.brand << " " << carObj1.model << " " << carObj1.year << "\n";
  cout << carObj2.brand << " " << carObj2.model << " " << carObj2.year << "\n";
  return 0;
}
Just like functions, constructors can also be defined outside the class. First, 
declare the constructor inside the class, and then define it outside of the class by specifying
 the name of the class, followed by the scope resolution :: operator, followed by the name of the 
constructor (which is the same as the class):

Access Specifiers
By now, you are quite familiar with the public keyword that appears in all of our class examples:

Example
class MyClass {  // The class
  public:        // Access specifier
    // class members goes here
};
The public keyword is an access specifier. Access specifiers define how the members (attributes 
and methods) of a class can be accessed. In the example above, the members are public - which 
means that they can be accessed and modified from outside the code.

However, what if we want members to be private and hidden from the outside world?

In C++, there are three access specifiers:

public - members are accessible from outside the class
private - members cannot be accessed (or viewed) from outside the class
protected - members cannot be accessed from outside the class, however, they can be accessed in 
inherited classes. You will learn more about Inheritance later.
In the following example, we demonstrate the differences between public and private members:

Example
class MyClass {
  public:    // Public access specifier
    int x;   // Public attribute
  private:   // Private access specifier
    int y;   // Private attribute
};

int main() {
  MyClass myObj;
  myObj.x = 25;  // Allowed (public)
  myObj.y = 50;  // Not allowed (private)
  return 0;
}
If you try to access a private member, an error occurs:

error: y is private
Note: It is possible to access private members of a class using a public method inside the same
 class. See the next chapter (Encapsulation) on how to do this.

Note: By default, all members of a class are private if you don't specify an access specifier:

Encapsulation
The meaning of Encapsulation, is to make sure that "sensitive" data is hidden from users. 
To achieve this, you must declare class variables/attributes as private (cannot be accessed 
from outside the class). If you want others to read or modify the value of a private member, 
you can provide public get and set methods.

Access Private Members
To access a private attribute, use public "get" and "set" methods:

Example
#include <iostream>
using namespace std;

class Employee {
  private:
    // Private attribute
    int salary;

  public:
    // Setter
    void setSalary(int s) {
      salary = s;
    }
    // Getter
    int getSalary() {
      return salary;
    }
};

int main() {
  Employee myObj;
  myObj.setSalary(50000);
  cout << myObj.getSalary();
  return 0;
}
Example explained
The salary attribute is private, which have restricted access.

The public setSalary() method takes a parameter (s) and assigns it to the salary attribute 

The public getSalary() method returns the value of the private salary attribute.

Inside main(), we create an object of the Employee class. Now we can use the setSalary() method to 
set the value of the private attribute to 50000. Then we call the getSalary() method on the object
 to return the value.

Why Encapsulation?
It is considered good practice to declare your class attributes as private (as often as you can). 
Encapsulation ensures better control of your data, because you (or others) can change one part of
the code without affecting other parts Increased security of data


Inheritance
In C++, it is possible to inherit attributes and methods from one class to another. We group the 
`"inheritance concept" into two categories:

derived class (child) - the class that inherits from another class
base class (parent) - the class being inherited from

Why And When To Use "Inheritance"?
- It is useful for code reusability: reuse attributes and methods of an existing class when you 
create a new class

Multilevel Inheritance
A class can also be derived from one class, which is already derived from another class.
// Base class (parent)
class MyClass {
  public:
    void myFunction() {
      cout << "Some content in parent class." ;
    }
};

// Derived class (child)
class MyChild: public MyClass {
};

// Derived class (grandchild)
class MyGrandChild: public MyChild {
};

int main() {
  MyGrandChild myObj;
  myObj.myFunction();
  return 0;
}

Multiple Inheritance
A class can also be derived from more than one base class, using a comma-separated list
// Base class
class MyClass {
  public:
    void myFunction() {
      cout << "Some content in parent class." ;
    }
};

// Another base class
class MyOtherClass {
  public:
    void myOtherFunction() {
      cout << "Some content in another class." ;
    }
};

// Derived class
class MyChildClass: public MyClass, public MyOtherClass {
};

int main() {
  MyChildClass myObj;
  myObj.myFunction();
  myObj.myOtherFunction();
  return 0;
}

Access Specifiers
You learned from the Access Specifiers chapter that there are three specifiers 
available in C++. Until now, we have only used public (members of a class are accessible 
from outside the class) and private (members can only be accessed within the class). 
The third specifier, protected, is similar to private, but it can also be accessed in the 
inherited class:

Example
// Base class
class Employee {
  protected: // Protected access specifier
    int salary;
};

// Derived class
class Programmer: public Employee {
  public:
    int bonus;
    void setSalary(int s) {
      salary = s;
    }
    int getSalary() {
      return salary;
    }
};

int main() {
  Programmer myObj;
  myObj.setSalary(50000);
  myObj.bonus = 15000;
  cout << "Salary: " << myObj.getSalary() << "\n";
  cout << "Bonus: " << myObj.bonus << "\n";
  return 0;
}


Polymorphism
Polymorphism means "many forms", and it occurs when we have many classes that are related to each other by inheritance.

Like we specified in the previous chapter; Inheritance lets us inherit attributes and methods from another class. 
Polymorphism uses those methods to perform different tasks. This allows us to perform a single action in different ways.

For example, think of a base class called Animal that has a method called animalSound(). Derived classes of Animals 
could be Pigs, Cats, Dogs, Birds - And they also have their own implementation of an animal sound (the pig oinks, 
and the cat meows, etc.):

Example
// Base class
class Animal {
  public:
    void animalSound() {
    cout << "The animal makes a sound \n" ;
  }
};

// Derived class
class Pig : public Animal {
  public:
    void animalSound() {
    cout << "The pig says: wee wee \n" ;
  }
};

// Derived class
class Dog : public Animal {
  public:
    void animalSound() {
    cout << "The dog says: bow wow \n" ;
  }
};

Function Overloading VS Function Overriding:

Inheritance: Overriding of functions occurs when one class is inherited from another class. 
Overloading can occur without inheritance.

Function Signature: Overloaded functions must differ in function signature ie either number of 
parameters or type of parameters should differ. In overriding, function signatures must be same.

Scope of functions: Overridden functions are in different scopes; whereas overloaded functions 
are in same scope.

Behavior of functions: Overriding is needed when derived class function has to do some added or 
different job than the base class function. Overloading is used to have same name functions which
 behave differently depending upon parameters passed to them

Difference between method overloading and method overriding
Method Overloading versus Overriding C# VB.Net Interview questions and answers
Method overloading happens in the same class shares the same method name but each method should have 
different number of parameters or parameters having different types and order. But in method overriding 
derived class have the same method with same name and exactly the same number and type of parameters 
and same return type as a parent class.

Method Overloading happens at compile time while Overriding happens at runtime. In method overloading, 
method call to its definition has happens at compile time while in method overriding, method call to its 
definition happens at runtime. More about..... Static binding and dynamic binding

In method Overloading, two or more methods shares the same name in the same class but having different 
signature while in method overriding, method of parent class is re-defined in the inherited class
 having same signature.

What are method overloading and method overriding? C# VB.Net
In the case of performance, method overloading gives better performance when compared to overriding because 
the binding of overridden methods is being done at runtime.

Static binding is happens when method overloaded while dynamic binding happens when method overriding.

Method overloading add or extend more to the method functionality while method overloading is to change the
 existing functionality of the method

Static methods can be overloaded, that means a class can have more than one static method of same name. But 
static methods cannot be overridden, even if you declare a same static method in derived class it has nothing 
to do with the same method of base class.


Function V/s Constructor

1. We can give any suitable name to function but constructor name will be the name of class.

In the following example you can see that i have created constructor pqr which is on the name of class but 
i have created function with the name of sum().

2. Function have return type but constructor don't have return type not even void.

3. Constructor calls once at the time of object creation but funcation can be called with object and 
without object(static funcation) many times


Differences between Constructors and Methods:

Constructors	                                        Methods
A Constructor is a block of code that      A Method is a collection of statements which returns a 
 initializes a newly created object.       value upon its execution.
A Constructor can be used to initialize	   A Method is a collection of statements which returns a value 
 an object.                                upon its execution.

 A Constructor is invoked implicitly by	   A Method consists of Java code to be executed.
the system.	                          
                                           A Method is invoked by the programmer.
A Constructor is invoked when a object 
is created using the keyword new.	   A Method is invoked through method calls.

A Constructor doesn’t have a return type   A Method must have a return type.
